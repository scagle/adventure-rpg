!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
Character	character.cpp	/^    Character::Character()$/;"	f	class:game::Character
Character	character.cpp	/^    Character::Character(SDL_Rect hitbox, SDL_Color color)$/;"	f	class:game::Character
Character	character.hpp	/^    class Character : public Solid$/;"	c	namespace:game
DOWN	menu_handler.hpp	/^        enum Direction{UP, DOWN};$/;"	e	enum:game::MenuHandler::Direction
Direction	menu_handler.hpp	/^        enum Direction{UP, DOWN};$/;"	g	class:game::MenuHandler
Environment	environment.cpp	/^    Environment::Environment()$/;"	f	class:game::Environment
Environment	environment.cpp	/^    Environment::Environment(std::vector< Solid >& solids)$/;"	f	class:game::Environment
Environment	environment.hpp	/^    class Environment$/;"	c	namespace:game
GameData	gamedata.cpp	/^    GameData::GameData()$/;"	f	class:game::GameData
GameData	gamedata.hpp	/^    class GameData$/;"	c	namespace:game
KeyboardHandler	keyboard_handler.cpp	/^    KeyboardHandler::KeyboardHandler(){}$/;"	f	class:game::KeyboardHandler
KeyboardHandler	keyboard_handler.hpp	/^    class KeyboardHandler$/;"	c	namespace:game
MAIN_CHARACTER_SPEED	globals.hpp	/^const float MAIN_CHARACTER_SPEED = 0.05;$/;"	v	typeref:typename:const float
MENU_BACKGROUND_COLOR	globals.hpp	/^const SDL_Color MENU_BACKGROUND_COLOR      = { 20  , 20  , 50  , 128 };$/;"	v	typeref:typename:const SDL_Color
MENU_BLUR_BACKGROUND_COLOR	globals.hpp	/^const SDL_Color MENU_BLUR_BACKGROUND_COLOR = { 50  , 50  , 50  , 128 };$/;"	v	typeref:typename:const SDL_Color
Menu	menu.cpp	/^    Menu::Menu()$/;"	f	class:game::Menu
Menu	menu.cpp	/^    Menu::Menu(std::string title)$/;"	f	class:game::Menu
Menu	menu.cpp	/^    Menu::Menu(std::string title, std::vector< Option > options)$/;"	f	class:game::Menu
Menu	menu.hpp	/^    class Menu$/;"	c	namespace:game
MenuHandler	menu_handler.cpp	/^    MenuHandler::MenuHandler()$/;"	f	class:game::MenuHandler
MenuHandler	menu_handler.hpp	/^    class MenuHandler$/;"	c	namespace:game
OPTION_BACKGROUND_COLOR	globals.hpp	/^const SDL_Color OPTION_BACKGROUND_COLOR    = { 50  , 50  , 80  , 0   };$/;"	v	typeref:typename:const SDL_Color
OPTION_FOREGROUND_COLOR	globals.hpp	/^const SDL_Color OPTION_FOREGROUND_COLOR    = { 255 , 255 , 255 , 0   };$/;"	v	typeref:typename:const SDL_Color
Option	menu.hpp	/^    struct Option$/;"	s	namespace:game
PRESSED	keyboard_handler.hpp	/^#define PRESSED /;"	d
RELEASED	keyboard_handler.hpp	/^#define RELEASED /;"	d
SCREEN_HEIGHT	globals.hpp	/^const int SCREEN_HEIGHT = 480;$/;"	v	typeref:typename:const int
SCREEN_WIDTH	globals.hpp	/^const int SCREEN_WIDTH  = 640;$/;"	v	typeref:typename:const int
Solid	solid.cpp	/^    Solid::Solid()$/;"	f	class:game::Solid
Solid	solid.hpp	/^        Solid(SDL_Rect hitbox, SDL_Color color) { this->hitbox = hitbox; this->color = color; }$/;"	f	class:game::Solid
Solid	solid.hpp	/^    class Solid$/;"	c	namespace:game
UP	menu_handler.hpp	/^        enum Direction{UP, DOWN};$/;"	e	enum:game::MenuHandler::Direction
WARNING_BACKGROUND_COLOR	globals.hpp	/^const SDL_Color WARNING_BACKGROUND_COLOR   = { 50  , 0   , 50  , 0   };$/;"	v	typeref:typename:const SDL_Color
World	world.cpp	/^    World::World()$/;"	f	class:game::World
World	world.hpp	/^    class World$/;"	c	namespace:game
actual_x	character.hpp	/^        float actual_x = 0; $/;"	m	class:game::Character	typeref:typename:float
actual_y	character.hpp	/^        float actual_y = 0;$/;"	m	class:game::Character	typeref:typename:float
bg	menu.hpp	/^        SDL_Color bg = MENU_BACKGROUND_COLOR;$/;"	m	class:game::Menu	typeref:typename:SDL_Color
bg	menu.hpp	/^        SDL_Color bg;$/;"	m	struct:game::Option	typeref:typename:SDL_Color
call_function	menu.hpp	/^        void (*call_function)();$/;"	m	struct:game::Option	typeref:typename:void (*)()
characters	environment.hpp	/^        std::vector< Character > characters;$/;"	m	class:game::Environment	typeref:typename:std::vector<Character>
checkInputs	gamedata.cpp	/^    void GameData::checkInputs( SDL_Event* event )$/;"	f	class:game::GameData	typeref:typename:void
close	gamedata.cpp	/^    bool GameData::close()$/;"	f	class:game::GameData	typeref:typename:bool
color	solid.hpp	/^        SDL_Color color;$/;"	m	class:game::Solid	typeref:typename:SDL_Color
colorToNumber	sdl_utils.cpp	/^    uint32_t colorToNumber(SDL_Color color)$/;"	f	namespace:game	typeref:typename:uint32_t
current_map	world.hpp	/^        unsigned int current_map = 0;   $/;"	m	class:game::World	typeref:typename:unsigned int
current_option	menu.hpp	/^        unsigned int current_option = 0;$/;"	m	class:game::Menu	typeref:typename:unsigned int
down	menu.cpp	/^    void Menu::down() $/;"	f	class:game::Menu	typeref:typename:void
fg	menu.hpp	/^        SDL_Color fg;$/;"	m	struct:game::Option	typeref:typename:SDL_Color
game	CMakeLists.txt	/^add_executable(game $/;"	t
game	character.cpp	/^namespace game$/;"	n	file:
game	character.hpp	/^namespace game$/;"	n
game	environment.cpp	/^namespace game$/;"	n	file:
game	environment.hpp	/^namespace game$/;"	n
game	gamedata.cpp	/^namespace game$/;"	n	file:
game	gamedata.hpp	/^namespace game$/;"	n
game	keyboard_handler.cpp	/^namespace game$/;"	n	file:
game	keyboard_handler.hpp	/^namespace game$/;"	n
game	menu.cpp	/^namespace game$/;"	n	file:
game	menu.hpp	/^namespace game$/;"	n
game	menu_handler.cpp	/^namespace game$/;"	n	file:
game	menu_handler.hpp	/^namespace game$/;"	n
game	sdl_utils.cpp	/^namespace game$/;"	n	file:
game	sdl_utils.hpp	/^namespace game$/;"	n
game	solid.cpp	/^namespace game$/;"	n	file:
game	solid.hpp	/^namespace game$/;"	n
game	world.cpp	/^namespace game$/;"	n	file:
game	world.hpp	/^namespace game$/;"	n
getAllOptions	menu.cpp	/^    std::vector< Option >* Menu::getAllOptions()$/;"	f	class:game::Menu	typeref:typename:std::vector<Option> *
getCharacters	environment.hpp	/^        std::vector< Character > getCharacters() { return this->characters; }$/;"	f	class:game::Environment	typeref:typename:std::vector<Character>
getColor	solid.hpp	/^        SDL_Color* getColor() { return &color; }$/;"	f	class:game::Solid	typeref:typename:SDL_Color *
getColorNumber	solid.hpp	/^        uint32_t getColorNumber() { return ( (color.a << 24) | (color.r << 16) | (color.g << 8) /;"	f	class:game::Solid	typeref:typename:uint32_t
getCurrentMap	world.hpp	/^        Environment* getCurrentMap() { return &(this->maps[current_map]); }$/;"	f	class:game::World	typeref:typename:Environment *
getFiles	world.cpp	/^    vector< string > World::getFiles(string dir, string name)$/;"	f	class:game::World	typeref:typename:vector<string>
getHorizontal	keyboard_handler.cpp	/^    int KeyboardHandler::getHorizontal()$/;"	f	class:game::KeyboardHandler	typeref:typename:int
getMap	world.hpp	/^        Environment* getMap(unsigned int index) { return &(this->maps[index]); }$/;"	f	class:game::World	typeref:typename:Environment *
getMenu	menu_handler.cpp	/^    Menu& MenuHandler::getMenu()$/;"	f	class:game::MenuHandler	typeref:typename:Menu &
getOption	menu.cpp	/^    Option Menu::getOption() $/;"	f	class:game::Menu	typeref:typename:Option
getRekt	solid.hpp	/^        SDL_Rect* getRekt() { return &hitbox; }$/;"	f	class:game::Solid	typeref:typename:SDL_Rect *
getSolids	environment.hpp	/^        std::vector< Solid > getSolids() { return this->solids; }$/;"	f	class:game::Environment	typeref:typename:std::vector<Solid>
getVertical	keyboard_handler.cpp	/^    int KeyboardHandler::getVertical()$/;"	f	class:game::KeyboardHandler	typeref:typename:int
handleEvent	keyboard_handler.cpp	/^    void KeyboardHandler::handleEvent(SDL_Event *event)$/;"	f	class:game::KeyboardHandler	typeref:typename:void
hitbox	solid.hpp	/^        SDL_Rect hitbox;$/;"	m	class:game::Solid	typeref:typename:SDL_Rect
inMenu	gamedata.hpp	/^            bool inMenu = true;$/;"	m	class:game::GameData	typeref:typename:bool
inMenu	menu_handler.cpp	/^    bool MenuHandler::inMenu()$/;"	f	class:game::MenuHandler	typeref:typename:bool
init	gamedata.cpp	/^    bool GameData::init()$/;"	f	class:game::GameData	typeref:typename:bool
initialized	gamedata.hpp	/^            bool initialized = false;$/;"	m	class:game::GameData	typeref:typename:bool
isDone	gamedata.hpp	/^            bool isDone() const { return quit; }$/;"	f	class:game::GameData	typeref:typename:bool
isPressed	keyboard_handler.cpp	/^    bool KeyboardHandler::isPressed(unsigned char key)$/;"	f	class:game::KeyboardHandler	typeref:typename:bool
isReleased	keyboard_handler.cpp	/^    bool KeyboardHandler::isReleased(unsigned char key)$/;"	f	class:game::KeyboardHandler	typeref:typename:bool
keyboard_handler	gamedata.hpp	/^            KeyboardHandler keyboard_handler;   \/\/ Keyboard input handler$/;"	m	class:game::GameData	typeref:typename:KeyboardHandler
load	menu_handler.cpp	/^    void MenuHandler::load()$/;"	f	class:game::MenuHandler	typeref:typename:void
loadMaps	world.cpp	/^    bool World::loadMaps()$/;"	f	class:game::World	typeref:typename:bool
loadMenus	menu_handler.cpp	/^    void MenuHandler::loadMenus()$/;"	f	class:game::MenuHandler	typeref:typename:void
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main_character	gamedata.hpp	/^            Character main_character;           \/\/ Main character$/;"	m	class:game::GameData	typeref:typename:Character
map_index	gamedata.hpp	/^            int map_index = 0;$/;"	m	class:game::GameData	typeref:typename:int
maps	world.hpp	/^        std::vector< Environment > maps;$/;"	m	class:game::World	typeref:typename:std::vector<Environment>
menu_handler	gamedata.hpp	/^            MenuHandler menu_handler;           \/\/ Menu handler$/;"	m	class:game::GameData	typeref:typename:MenuHandler
menu_stack	menu_handler.hpp	/^        std::stack< Menu > menu_stack;$/;"	m	class:game::MenuHandler	typeref:typename:std::stack<Menu>
menus	menu_handler.hpp	/^        std::unordered_map<std::string, Menu > menus;$/;"	m	class:game::MenuHandler	typeref:typename:std::unordered_map<std::string,Menu>
moveMenu	menu_handler.cpp	/^    void MenuHandler::moveMenu(Direction dir)$/;"	f	class:game::MenuHandler	typeref:typename:void
next	menu.hpp	/^        std::string next;$/;"	m	struct:game::Option	typeref:typename:std::string
options	menu.hpp	/^        std::vector< Option > options;$/;"	m	class:game::Menu	typeref:typename:std::vector<Option>
popMenu	menu_handler.cpp	/^    void MenuHandler::popMenu()$/;"	f	class:game::MenuHandler	typeref:typename:void
pushMenu	menu_handler.cpp	/^    void MenuHandler::pushMenu(std::string key)$/;"	f	class:game::MenuHandler	typeref:typename:void
quit	gamedata.hpp	/^            bool quit = false;$/;"	m	class:game::GameData	typeref:typename:bool
quit	menu_handler.cpp	/^    void MenuHandler::quit()$/;"	f	class:game::MenuHandler	typeref:typename:void
render	character.cpp	/^    void Character::render( SDL_Renderer *renderer )$/;"	f	class:game::Character	typeref:typename:void
render	gamedata.cpp	/^    void GameData::render()$/;"	f	class:game::GameData	typeref:typename:void
render	menu_handler.cpp	/^    void MenuHandler::render( SDL_Renderer *renderer )$/;"	f	class:game::MenuHandler	typeref:typename:void
render	solid.cpp	/^    void Solid::render( SDL_Renderer *renderer )$/;"	f	class:game::Solid	typeref:typename:void
renderer	gamedata.hpp	/^            SDL_Renderer *renderer = NULL;      \/\/ Hardware accelerated renderer$/;"	m	class:game::GameData	typeref:typename:SDL_Renderer *
save	menu_handler.cpp	/^    void MenuHandler::save()$/;"	f	class:game::MenuHandler	typeref:typename:void
selectMenu	menu_handler.cpp	/^    void MenuHandler::selectMenu()$/;"	f	class:game::MenuHandler	typeref:typename:void
setVelocity	character.hpp	/^        void setVelocity(float vx, float vy){ velocity_x = vx; velocity_y = vy; } $/;"	f	class:game::Character	typeref:typename:void
solids	environment.hpp	/^        std::vector< Solid > solids;$/;"	m	class:game::Environment	typeref:typename:std::vector<Solid>
statics	gamedata.hpp	/^            std::vector< Solid > statics;$/;"	m	class:game::GameData	typeref:typename:std::vector<Solid>
surface	gamedata.hpp	/^            SDL_Surface* surface = NULL;        \/\/ Surface being drawn to$/;"	m	class:game::GameData	typeref:typename:SDL_Surface *
text	menu.hpp	/^        std::string text;$/;"	m	struct:game::Option	typeref:typename:std::string
title	menu.hpp	/^        std::string title = "";$/;"	m	class:game::Menu	typeref:typename:std::string
up	menu.cpp	/^    void Menu::up() $/;"	f	class:game::Menu	typeref:typename:void
update	character.cpp	/^    void Character::update(std::vector< Solid > *statics)$/;"	f	class:game::Character	typeref:typename:void
update	gamedata.cpp	/^    void GameData::update()$/;"	f	class:game::GameData	typeref:typename:void
updateMap	gamedata.cpp	/^    void GameData::updateMap(int map_index)$/;"	f	class:game::GameData	typeref:typename:void
velocity_x	character.hpp	/^        float velocity_x = 0;$/;"	m	class:game::Character	typeref:typename:float
velocity_y	character.hpp	/^        float velocity_y = 0;$/;"	m	class:game::Character	typeref:typename:float
window	gamedata.hpp	/^            SDL_Window* window = NULL;          \/\/ Window containing the game$/;"	m	class:game::GameData	typeref:typename:SDL_Window *
world	gamedata.hpp	/^            World world;                        \/\/ World with all the maps$/;"	m	class:game::GameData	typeref:typename:World
~GameData	gamedata.hpp	/^            ~GameData() { }$/;"	f	class:game::GameData
