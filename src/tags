!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
Character	objects/character.cpp	/^Character::Character()$/;"	f	class:Character
Character	objects/character.cpp	/^Character::Character(SDL_Rect hitbox, SDL_Color color)$/;"	f	class:Character
Character	objects/character.hpp	/^class Character : public Solid$/;"	c
Environment	objects/environment.cpp	/^Environment::Environment()$/;"	f	class:Environment
Environment	objects/environment.cpp	/^Environment::Environment(std::vector< Solid >& solids)$/;"	f	class:Environment
Environment	objects/environment.hpp	/^class Environment$/;"	c
KeyboardHandler	ui/keyboard_handler.cpp	/^KeyboardHandler::KeyboardHandler(){}$/;"	f	class:KeyboardHandler
KeyboardHandler	ui/keyboard_handler.hpp	/^class KeyboardHandler$/;"	c
MAIN_CHARACTER_SPEED	globals.hpp	/^const float MAIN_CHARACTER_SPEED = 0.05;$/;"	v	typeref:typename:const float
MENU_BACKGROUND_COLOR	globals.hpp	/^const SDL_Color MENU_BACKGROUND_COLOR   = {20, 20, 50, 128};$/;"	v	typeref:typename:const SDL_Color
Menu	ui/menu.cpp	/^Menu::Menu()$/;"	f	class:Menu
Menu	ui/menu.hpp	/^class Menu$/;"	c
MenuHandler	ui/menu_handler.cpp	/^MenuHandler::MenuHandler()$/;"	f	class:MenuHandler
MenuHandler	ui/menu_handler.hpp	/^class MenuHandler$/;"	c
OPTION_BACKGROUND_COLOR	globals.hpp	/^const SDL_Color OPTION_BACKGROUND_COLOR = {50, 50, 80, 0};$/;"	v	typeref:typename:const SDL_Color
OPTION_FOREGROUND_COLOR	globals.hpp	/^const SDL_Color OPTION_FOREGROUND_COLOR = {255, 255, 255, 0};$/;"	v	typeref:typename:const SDL_Color
Option	ui/menu.hpp	/^struct Option$/;"	s
PRESSED	ui/keyboard_handler.hpp	/^#define PRESSED /;"	d
RELEASED	ui/keyboard_handler.hpp	/^#define RELEASED /;"	d
SCREEN_HEIGHT	globals.hpp	/^const unsigned int SCREEN_HEIGHT = 480;$/;"	v	typeref:typename:const unsigned int
SCREEN_WIDTH	globals.hpp	/^const unsigned int SCREEN_WIDTH  = 640;$/;"	v	typeref:typename:const unsigned int
Solid	objects/solid.hpp	/^    Solid() { }$/;"	f	class:Solid
Solid	objects/solid.hpp	/^    Solid(SDL_Rect hitbox, SDL_Color color) { this->hitbox = hitbox; this->color = color; }$/;"	f	class:Solid
Solid	objects/solid.hpp	/^class Solid$/;"	c
World	objects/world.cpp	/^World::World()$/;"	f	class:World
World	objects/world.hpp	/^class World$/;"	c
actual_x	objects/character.hpp	/^    float actual_x = 0; $/;"	m	class:Character	typeref:typename:float
actual_y	objects/character.hpp	/^    float actual_y = 0;$/;"	m	class:Character	typeref:typename:float
bg	ui/menu.hpp	/^    SDL_Color bg = MENU_BACKGROUND_COLOR;$/;"	m	class:Menu	typeref:typename:SDL_Color
bg	ui/menu.hpp	/^    SDL_Color bg = OPTION_BACKGROUND_COLOR;$/;"	m	struct:Option	typeref:typename:SDL_Color
characters	objects/environment.hpp	/^    std::vector< Character > characters;$/;"	m	class:Environment	typeref:typename:std::vector<Character>
checkInputs	main.cpp	/^void checkInputs(SDL_Event* event)$/;"	f	typeref:typename:void
close	main.cpp	/^bool close()$/;"	f	typeref:typename:bool
color	objects/solid.hpp	/^    SDL_Color color;$/;"	m	class:Solid	typeref:typename:SDL_Color
current_map	objects/world.hpp	/^    unsigned int current_map = 0;   $/;"	m	class:World	typeref:typename:unsigned int
fg	ui/menu.hpp	/^    SDL_Color fg = OPTION_FOREGROUND_COLOR;$/;"	m	struct:Option	typeref:typename:SDL_Color
getColor	objects/solid.hpp	/^    SDL_Color* getColor() { return &color; }$/;"	f	class:Solid	typeref:typename:SDL_Color *
getColorNumber	objects/solid.hpp	/^    uint32_t getColorNumber() { return ( (color.a << 24) | (color.r << 16) | (color.g << 8) | (c/;"	f	class:Solid	typeref:typename:uint32_t
getCurrentMap	objects/world.hpp	/^    Environment* getCurrentMap() { return &(this->maps[current_map]); }$/;"	f	class:World	typeref:typename:Environment *
getFiles	objects/world.cpp	/^vector< string > World::getFiles(string dir, string name)$/;"	f	class:World	typeref:typename:vector<string>
getHorizontal	ui/keyboard_handler.cpp	/^int KeyboardHandler::getHorizontal()$/;"	f	class:KeyboardHandler	typeref:typename:int
getMap	objects/world.hpp	/^    Environment* getMap(unsigned int index) { return &(this->maps[index]); }$/;"	f	class:World	typeref:typename:Environment *
getRekt	objects/solid.hpp	/^    SDL_Rect* getRekt() { return &hitbox; }$/;"	f	class:Solid	typeref:typename:SDL_Rect *
getSolids	objects/environment.hpp	/^    std::vector< Solid > getSolids() { return this->solids; }$/;"	f	class:Environment	typeref:typename:std::vector<Solid>
getVertical	ui/keyboard_handler.cpp	/^int KeyboardHandler::getVertical()$/;"	f	class:KeyboardHandler	typeref:typename:int
handleEvent	ui/keyboard_handler.cpp	/^void KeyboardHandler::handleEvent(SDL_Event *event)$/;"	f	class:KeyboardHandler	typeref:typename:void
hitbox	objects/solid.hpp	/^    SDL_Rect hitbox;$/;"	m	class:Solid	typeref:typename:SDL_Rect
init	main.cpp	/^bool init()$/;"	f	typeref:typename:bool
isPressed	ui/keyboard_handler.cpp	/^bool KeyboardHandler::isPressed(unsigned char key)$/;"	f	class:KeyboardHandler	typeref:typename:bool
isReleased	ui/keyboard_handler.cpp	/^bool KeyboardHandler::isReleased(unsigned char key)$/;"	f	class:KeyboardHandler	typeref:typename:bool
keyboard_handler	main.cpp	/^KeyboardHandler keyboard_handler;   \/\/ Keyboard input handler$/;"	v	typeref:typename:KeyboardHandler
loadMaps	objects/world.cpp	/^bool World::loadMaps()$/;"	f	class:World	typeref:typename:bool
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main_character	main.cpp	/^Character main_character;           \/\/ Main character$/;"	v	typeref:typename:Character
map_index	main.cpp	/^int map_index = 0;$/;"	v	typeref:typename:int
maps	objects/world.hpp	/^    std::vector< Environment > maps;$/;"	m	class:World	typeref:typename:std::vector<Environment>
menu_handler	main.cpp	/^MenuHandler menu_handler;           \/\/ Menu handler$/;"	v	typeref:typename:MenuHandler
menu_stack	ui/menu_handler.hpp	/^    std::stack< Menu > menu_stack;$/;"	m	class:MenuHandler	typeref:typename:std::stack<Menu>
menus	ui/menu_handler.hpp	/^    std::unordered_map<std::string, Menu > menus;$/;"	m	class:MenuHandler	typeref:typename:std::unordered_map<std::string,Menu>
options	ui/menu.hpp	/^    std::vector< Option > options;$/;"	m	class:Menu	typeref:typename:std::vector<Option>
quit	main.cpp	/^bool quit = false;$/;"	v	typeref:typename:bool
render	main.cpp	/^void render()$/;"	f	typeref:typename:void
renderer	main.cpp	/^SDL_Renderer *renderer = NULL;      \/\/ Hardware accelerated renderer$/;"	v	typeref:typename:SDL_Renderer *
setVelocity	objects/character.hpp	/^    void setVelocity(float vx, float vy){ velocity_x = vx; velocity_y = vy; } $/;"	f	class:Character	typeref:typename:void
solids	objects/environment.hpp	/^    std::vector< Solid > solids;$/;"	m	class:Environment	typeref:typename:std::vector<Solid>
statics	main.cpp	/^std::vector< Solid > statics;$/;"	v	typeref:typename:std::vector<Solid>
surface	main.cpp	/^SDL_Surface* surface = NULL;        \/\/ Surface being drawn to$/;"	v	typeref:typename:SDL_Surface *
text	ui/menu.hpp	/^    std::string text = "";$/;"	m	struct:Option	typeref:typename:std::string
update	main.cpp	/^void update()$/;"	f	typeref:typename:void
update	objects/character.cpp	/^void Character::update(std::vector< Solid > *statics)$/;"	f	class:Character	typeref:typename:void
updateMap	main.cpp	/^void updateMap(int map_index)$/;"	f	typeref:typename:void
velocity_x	objects/character.hpp	/^    float velocity_x = 0;$/;"	m	class:Character	typeref:typename:float
velocity_y	objects/character.hpp	/^    float velocity_y = 0;$/;"	m	class:Character	typeref:typename:float
window	main.cpp	/^SDL_Window* window = NULL;          \/\/ Window containing the game$/;"	v	typeref:typename:SDL_Window *
world	main.cpp	/^World world;                        \/\/ World with all the maps$/;"	v	typeref:typename:World
