!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
BLUR_BACKGROUND_COLOR	globals.hpp	/^const SDL_Color BLUR_BACKGROUND_COLOR      = { 0  , 0  , 0  , 100 };$/;"	v	typeref:typename:const SDL_Color
Character	character.cpp	/^    Character::Character()$/;"	f	class:game::Character
Character	character.cpp	/^    Character::Character(SDL_Rect hitbox, SDL_Color color, std::string name)$/;"	f	class:game::Character
Character	character.cpp	/^    Character::Character(SDL_Rect hitbox, SDL_Color color, std::string name, bool mc = false)$/;"	f	class:game::Character
Character	character.hpp	/^    class Character : public Solid$/;"	c	namespace:game
Choice	dialog.hpp	/^        struct Choice$/;"	s	class:game::Dialog
DEFAULT_FONT	globals.hpp	/^const int DEFAULT_FONT  = 0;$/;"	v	typeref:typename:const int
DIALOG	event.hpp	/^            DIALOG = 1,$/;"	e	enum:game::Event::Game_EventType
DOWN	enums/direction.hpp	/^        DOWN  ,$/;"	e	enum:game::Direction
Dialog	dialog.hpp	/^        Dialog() { }$/;"	f	class:game::Dialog
Dialog	dialog.hpp	/^        Dialog(std::vector< std::string > p, std::vector< Choice > c) : pages(p), choices(c) { }$/;"	f	class:game::Dialog
Dialog	dialog.hpp	/^    class Dialog$/;"	c	namespace:game
Direction	enums/direction.hpp	/^    enum class Direction $/;"	g	namespace:game
ENUM_SOURCES	enums/CMakeLists.txt	/^set(ENUM_SOURCES $/;"	v
Environment	environment.hpp	/^        Environment() { }$/;"	f	class:game::Environment
Environment	environment.hpp	/^        Environment(std::string n, std::vector< Solid > o, std::vector< Solid > p, std::vector< /;"	f	class:game::Environment
Environment	environment.hpp	/^    class Environment$/;"	c	namespace:game
Event	event.cpp	/^    Event::Event( Game_EventType t, std::string v ) : type(t), value(v) $/;"	f	class:game::Event
Event	event.cpp	/^    Event::Event()$/;"	f	class:game::Event
Event	event.hpp	/^    class Event$/;"	c	namespace:game
GAME_SOURCES	CMakeLists.txt	/^set(GAME_SOURCES $/;"	v
GameData	gamedata.hpp	/^            GameData() { }$/;"	f	class:game::GameData
GameData	gamedata.hpp	/^    class GameData$/;"	c	namespace:game
Game_EventType	event.hpp	/^        enum class Game_EventType$/;"	g	class:game::Event
KeyboardHandler	keyboard_handler.cpp	/^    KeyboardHandler::KeyboardHandler(){}$/;"	f	class:game::KeyboardHandler
KeyboardHandler	keyboard_handler.hpp	/^    class KeyboardHandler$/;"	c	namespace:game
LEFT	enums/direction.hpp	/^        LEFT  ,$/;"	e	enum:game::Direction
MAIN_CHARACTER_NAME	globals.hpp	/^const std::string MAIN_CHARACTER_NAME = "Bob";$/;"	v	typeref:typename:const std::string
MAIN_CHARACTER_SPEED	globals.hpp	/^const float MAIN_CHARACTER_SPEED = 0.10;$/;"	v	typeref:typename:const float
MENU_BACKGROUND_COLOR	globals.hpp	/^const SDL_Color MENU_BACKGROUND_COLOR      = { 20  , 20  , 50  , 255 };$/;"	v	typeref:typename:const SDL_Color
Menu	menu.cpp	/^    Menu::Menu()$/;"	f	class:game::Menu
Menu	menu.cpp	/^    Menu::Menu(std::string title)$/;"	f	class:game::Menu
Menu	menu.cpp	/^    Menu::Menu(std::string title, std::vector< Option > options)$/;"	f	class:game::Menu
Menu	menu.hpp	/^    class Menu$/;"	c	namespace:game
MenuHandler	menu_handler.cpp	/^    MenuHandler::MenuHandler()$/;"	f	class:game::MenuHandler
MenuHandler	menu_handler.hpp	/^    class MenuHandler$/;"	c	namespace:game
NEXT	enums/direction.hpp	/^        NEXT  ,$/;"	e	enum:game::Direction
OPTION_BACKGROUND_COLOR	globals.hpp	/^const SDL_Color OPTION_BACKGROUND_COLOR    = { 50  , 50  , 80  , 255 };$/;"	v	typeref:typename:const SDL_Color
OPTION_FOREGROUND_COLOR	globals.hpp	/^const SDL_Color OPTION_FOREGROUND_COLOR    = { 255   , 255 , 255 , 255 };$/;"	v	typeref:typename:const SDL_Color
OPTION_SELECTED_BACKGROUND_COLOR	globals.hpp	/^const SDL_Color OPTION_SELECTED_BACKGROUND_COLOR  = { 100  , 100  , 150  , 255 };$/;"	v	typeref:typename:const SDL_Color
Option	option.cpp	/^    Option::Option( std::string t, std::string n ) $/;"	f	class:game::Option
Option	option.cpp	/^    Option::Option( std::string t, std::string n, SDL_Color bg, SDL_Color fg, int fi ) $/;"	f	class:game::Option
Option	option.cpp	/^    Option::Option(const Option &other) : text(other.text), next(other.next), $/;"	f	class:game::Option
Option	option.hpp	/^    class Option$/;"	c	namespace:game
PORTAL	event.hpp	/^            PORTAL = 0,$/;"	e	enum:game::Event::Game_EventType
PORTAL	solid.hpp	/^            PORTAL,        $/;"	e	enum:game::Solid::Type
PRESSED	keyboard_handler.hpp	/^#define PRESSED /;"	d
PREV	enums/direction.hpp	/^        PREV  ,$/;"	e	enum:game::Direction
RELEASED	keyboard_handler.hpp	/^#define RELEASED /;"	d
RIGHT	enums/direction.hpp	/^        RIGHT ,$/;"	e	enum:game::Direction
SCREEN_HEIGHT	globals.hpp	/^const int SCREEN_HEIGHT = 480;$/;"	v	typeref:typename:const int
SCREEN_WIDTH	globals.hpp	/^const int SCREEN_WIDTH  = 640;$/;"	v	typeref:typename:const int
SOLID	solid.hpp	/^            SOLID,$/;"	e	enum:game::Solid::Type
Solid	solid.hpp	/^        Solid() : type(Type::SOLID) { }$/;"	f	class:game::Solid
Solid	solid.hpp	/^        Solid(SDL_Rect h, SDL_Color c, Type t) : hitbox(h), color(c), type(t) { }$/;"	f	class:game::Solid
Solid	solid.hpp	/^        Solid(SDL_Rect h, SDL_Color c, Type t, std::string l) : hitbox(h), color(c), type(t), lo/;"	f	class:game::Solid
Solid	solid.hpp	/^        Solid(Type t) : type(t) { }$/;"	f	class:game::Solid
Solid	solid.hpp	/^    class Solid$/;"	c	namespace:game
Type	solid.hpp	/^        enum class Type { $/;"	g	class:game::Solid
UP	enums/direction.hpp	/^        UP    ,$/;"	e	enum:game::Direction
WARNING_BACKGROUND_COLOR	globals.hpp	/^const SDL_Color WARNING_BACKGROUND_COLOR   = { 50  , 50   , 80  , 255 };$/;"	v	typeref:typename:const SDL_Color
World	world.cpp	/^    World::World()$/;"	f	class:game::World
World	world.hpp	/^    class World$/;"	c	namespace:game
action	dialog.hpp	/^            std::string action;$/;"	m	struct:game::Dialog::Choice	typeref:typename:std::string
actual_x	character.hpp	/^        float actual_x; $/;"	m	class:game::Character	typeref:typename:float
actual_y	character.hpp	/^        float actual_y;$/;"	m	class:game::Character	typeref:typename:float
background	option.hpp	/^            SDL_Color background;    \/\/ Background color of option$/;"	m	class:game::Option	typeref:typename:SDL_Color
bg	menu.hpp	/^        SDL_Color bg = MENU_BACKGROUND_COLOR;$/;"	m	class:game::Menu	typeref:typename:SDL_Color
box	dialog.hpp	/^        SDL_Rect box;$/;"	m	class:game::Dialog	typeref:typename:SDL_Rect
characters	environment.hpp	/^        std::vector< Character > characters;$/;"	m	class:game::Environment	typeref:typename:std::vector<Character>
checkInputs	gamedata.cpp	/^    void GameData::checkInputs( SDL_Event* event )$/;"	f	class:game::GameData	typeref:typename:void
checkNearby	character.cpp	/^    void Character::checkNearby(std::vector< Character > *characters)$/;"	f	class:game::Character	typeref:typename:void
checkPortal	character.cpp	/^    void Character::checkPortal(std::vector< Solid > *portals)$/;"	f	class:game::Character	typeref:typename:void
choice_index	dialog.hpp	/^        unsigned int choice_index = 0;$/;"	m	class:game::Dialog	typeref:typename:unsigned int
choices	dialog.hpp	/^        std::vector< Choice > choices;$/;"	m	class:game::Dialog	typeref:typename:std::vector<Choice>
close	gamedata.cpp	/^    bool GameData::close()$/;"	f	class:game::GameData	typeref:typename:bool
color	solid.hpp	/^        SDL_Color color;$/;"	m	class:game::Solid	typeref:typename:SDL_Color
colorToNumber	sdl_utils.cpp	/^    uint32_t colorToNumber(SDL_Color color)$/;"	f	namespace:game	typeref:typename:uint32_t
construct	character.cpp	/^    void Character::construct(SDL_Rect hitbox, SDL_Color color, std::string name, bool mc)$/;"	f	class:game::Character	typeref:typename:void
current_map	world.cpp	/^    unsigned int World::current_map = 0;$/;"	m	class:game::World	typeref:typename:unsigned int
current_map	world.hpp	/^        static unsigned int current_map;   $/;"	m	class:game::World	typeref:typename:unsigned int
current_option	menu.hpp	/^        unsigned int current_option = 0;$/;"	m	class:game::Menu	typeref:typename:unsigned int
dialog_stack	menu_handler.cpp	/^    std::stack< Dialog* > MenuHandler::dialog_stack;$/;"	m	class:game::MenuHandler	typeref:typename:std::stack<Dialog * >
dialog_stack	menu_handler.hpp	/^        static std::stack< Dialog* > dialog_stack;$/;"	m	class:game::MenuHandler	typeref:typename:std::stack<Dialog * >
dialogs	menu_handler.cpp	/^    std::unordered_map< std::string, Dialog > MenuHandler::dialogs;$/;"	m	class:game::MenuHandler	typeref:typename:std::unordered_map<std::string,Dialog>
dialogs	menu_handler.hpp	/^        static std::unordered_map< std::string, Dialog > dialogs;$/;"	m	class:game::MenuHandler	typeref:typename:std::unordered_map<std::string,Dialog>
down	menu.cpp	/^    void Menu::down() $/;"	f	class:game::Menu	typeref:typename:void
event_tracker	event.cpp	/^    std::bitset< 255 > Event::event_tracker;$/;"	m	class:game::Event	typeref:typename:std::bitset<255>
event_tracker	event.hpp	/^            static std::bitset< 255 > event_tracker;$/;"	m	class:game::Event	typeref:typename:std::bitset<255>
font	option.hpp	/^            TTF_Font *font;          \/\/ Font to draw text with$/;"	m	class:game::Option	typeref:typename:TTF_Font *
font_index	option.hpp	/^            int font_index = 0;$/;"	m	class:game::Option	typeref:typename:int
fonts	gamedata.cpp	/^    std::vector< TTF_Font* > GameData::fonts; $/;"	m	class:game::GameData	typeref:typename:std::vector<TTF_Font * >
fonts	gamedata.hpp	/^            static std::vector< TTF_Font* > fonts;  \/\/ Fonts$/;"	m	class:game::GameData	typeref:typename:std::vector<TTF_Font * >
foreground	option.hpp	/^            SDL_Color foreground;    \/\/ Foreground color of option$/;"	m	class:game::Option	typeref:typename:SDL_Color
game	CMakeLists.txt	/^add_executable(game ${GAME_SOURCES} ${ENUM_SOURCES})$/;"	t
game	character.cpp	/^namespace game$/;"	n	file:
game	character.hpp	/^namespace game$/;"	n
game	dialog.cpp	/^namespace game$/;"	n	file:
game	dialog.hpp	/^namespace game$/;"	n
game	enums/direction.hpp	/^namespace game$/;"	n
game	environment.cpp	/^namespace game$/;"	n	file:
game	environment.hpp	/^namespace game$/;"	n
game	event.cpp	/^namespace game$/;"	n	file:
game	event.hpp	/^namespace game$/;"	n
game	gamedata.cpp	/^namespace game$/;"	n	file:
game	gamedata.hpp	/^namespace game$/;"	n
game	keyboard_handler.cpp	/^namespace game$/;"	n	file:
game	keyboard_handler.hpp	/^namespace game$/;"	n
game	menu.cpp	/^namespace game$/;"	n	file:
game	menu.hpp	/^namespace game$/;"	n
game	menu_handler.cpp	/^namespace game$/;"	n	file:
game	menu_handler.hpp	/^namespace game$/;"	n
game	option.cpp	/^namespace game$/;"	n	file:
game	option.hpp	/^namespace game$/;"	n
game	sdl_utils.cpp	/^namespace game$/;"	n	file:
game	sdl_utils.hpp	/^namespace game$/;"	n
game	solid.cpp	/^namespace game$/;"	n	file:
game	solid.hpp	/^namespace game$/;"	n
game	world.cpp	/^namespace game$/;"	n	file:
game	world.hpp	/^namespace game$/;"	n
getActiveRenderer	gamedata.hpp	/^            static SDL_Renderer* getActiveRenderer() { return renderer; }$/;"	f	class:game::GameData	typeref:typename:SDL_Renderer *
getBackground	option.hpp	/^            SDL_Color* getBackground() { return &(this->background); }$/;"	f	class:game::Option	typeref:typename:SDL_Color *
getCharacters	environment.hpp	/^        std::vector< Character >* getCharacters() { return &characters; }$/;"	f	class:game::Environment	typeref:typename:std::vector<Character> *
getCharacters	world.cpp	/^    std::vector< Character* >* World::getCharacters()$/;"	f	class:game::World	typeref:typename:std::vector<Character * > *
getCharactersInMap	world.hpp	/^        static std::vector< Character >* getCharactersInMap() { return maps[current_map].getChar/;"	f	class:game::World	typeref:typename:std::vector<Character> *
getChoice	dialog.hpp	/^        Dialog::Choice* getChoice() { return &(this->choices[choice_index]); };$/;"	f	class:game::Dialog	typeref:typename:Dialog::Choice *
getColor	solid.hpp	/^        SDL_Color* getColor() { return &color; }$/;"	f	class:game::Solid	typeref:typename:SDL_Color *
getColorNumber	solid.hpp	/^        uint32_t getColorNumber() { return ( (color.a << 24) | (color.r << 16) | (color.g << 8) /;"	f	class:game::Solid	typeref:typename:uint32_t
getCurrentMap	world.hpp	/^        Environment* getCurrentMap() { return &(this->maps[current_map]); }$/;"	f	class:game::World	typeref:typename:Environment *
getDialog	menu_handler.cpp	/^    Dialog* MenuHandler::getDialog()$/;"	f	class:game::MenuHandler	typeref:typename:Dialog *
getFiles	world.cpp	/^    vector< string > World::getFiles(string dir, string name)$/;"	f	class:game::World	typeref:typename:vector<string>
getFont	gamedata.hpp	/^            static TTF_Font* getFont(int) { return fonts[0]; }$/;"	f	class:game::GameData	typeref:typename:TTF_Font *
getForeground	option.hpp	/^            SDL_Color* getForeground() { return &(this->foreground); }$/;"	f	class:game::Option	typeref:typename:SDL_Color *
getHorizontal	keyboard_handler.cpp	/^    int KeyboardHandler::getHorizontal()$/;"	f	class:game::KeyboardHandler	typeref:typename:int
getIndex	event.hpp	/^            static int getIndex(Game_EventType type) { return type_to_indices[type]; }$/;"	f	class:game::Event	typeref:typename:int
getInitialized	gamedata.hpp	/^            static bool getInitialized() { return initialized; }$/;"	f	class:game::GameData	typeref:typename:bool
getLocation	solid.hpp	/^        std::string getLocation() { return this->location; }$/;"	f	class:game::Solid	typeref:typename:std::string
getMap	world.hpp	/^        Environment* getMap(unsigned int index) { return &(this->maps[index]); }$/;"	f	class:game::World	typeref:typename:Environment *
getMenu	menu_handler.cpp	/^    Menu* MenuHandler::getMenu()$/;"	f	class:game::MenuHandler	typeref:typename:Menu *
getName	event.hpp	/^            std::string getName() { return type_to_names[type]; }$/;"	f	class:game::Event	typeref:typename:std::string
getNext	option.hpp	/^            std::string getNext() { return this->next; }$/;"	f	class:game::Option	typeref:typename:std::string
getOption	menu.cpp	/^    Option* Menu::getOption() $/;"	f	class:game::Menu	typeref:typename:Option *
getOptions	menu.cpp	/^    std::vector< Option >* Menu::getOptions()$/;"	f	class:game::Menu	typeref:typename:std::vector<Option> *
getPortals	environment.hpp	/^        std::vector< Solid >* getPortals() { return &portals; }$/;"	f	class:game::Environment	typeref:typename:std::vector<Solid> *
getPortals	gamedata.hpp	/^            static std::vector< Solid >* getPortals() { return portals; }$/;"	f	class:game::GameData	typeref:typename:std::vector<Solid> *
getQuit	gamedata.hpp	/^            static bool getQuit() { return quit; }$/;"	f	class:game::GameData	typeref:typename:bool
getRekt	solid.hpp	/^        SDL_Rect* getRekt() { return &hitbox; }$/;"	f	class:game::Solid	typeref:typename:SDL_Rect *
getSolids	environment.hpp	/^        std::vector< Solid >* getSolids() { return &solids; }$/;"	f	class:game::Environment	typeref:typename:std::vector<Solid> *
getSolids	gamedata.hpp	/^            static std::vector< Solid >* getSolids() { return solids; }$/;"	f	class:game::GameData	typeref:typename:std::vector<Solid> *
getText	option.hpp	/^            std::string getText() { return this->text; }$/;"	f	class:game::Option	typeref:typename:std::string
getTextMessage	option.hpp	/^            SDL_Texture* getTextMessage() { return this->message; }$/;"	f	class:game::Option	typeref:typename:SDL_Texture *
getType	event.hpp	/^            Game_EventType getType() { return type; }$/;"	f	class:game::Event	typeref:typename:Game_EventType
getType	solid.hpp	/^        Type getType() { return this->type; }$/;"	f	class:game::Solid	typeref:typename:Type
getValue	event.hpp	/^            std::string getValue() { return value; }$/;"	f	class:game::Event	typeref:typename:std::string
getVertical	keyboard_handler.cpp	/^    int KeyboardHandler::getVertical()$/;"	f	class:game::KeyboardHandler	typeref:typename:int
handleEvent	keyboard_handler.cpp	/^    void KeyboardHandler::handleEvent(SDL_Event *event)$/;"	f	class:game::KeyboardHandler	typeref:typename:void
hitbox	solid.hpp	/^        SDL_Rect hitbox;$/;"	m	class:game::Solid	typeref:typename:SDL_Rect
inDialog	menu_handler.cpp	/^    bool MenuHandler::inDialog()$/;"	f	class:game::MenuHandler	typeref:typename:bool
inEvent	event.hpp	/^            static bool inEvent(Game_EventType type) { return event_tracker[getIndex(type)]; }$/;"	f	class:game::Event	typeref:typename:bool
inEvent	gamedata.hpp	/^            static bool inEvent(Event::Game_EventType type) { return Event::inEvent(type); }$/;"	f	class:game::GameData	typeref:typename:bool
inMenu	menu_handler.cpp	/^    bool MenuHandler::inMenu()$/;"	f	class:game::MenuHandler	typeref:typename:bool
init	gamedata.cpp	/^    bool GameData::init()$/;"	f	class:game::GameData	typeref:typename:bool
initFonts	gamedata.cpp	/^    bool GameData::initFonts()$/;"	f	class:game::GameData	typeref:typename:bool
initMenus	gamedata.cpp	/^    bool GameData::initMenus()$/;"	f	class:game::GameData	typeref:typename:bool
initSDL	gamedata.cpp	/^    bool GameData::initSDL()$/;"	f	class:game::GameData	typeref:typename:bool
initSDL_Renderer	gamedata.cpp	/^    bool GameData::initSDL_Renderer()$/;"	f	class:game::GameData	typeref:typename:bool
initSDL_Window	gamedata.cpp	/^    bool GameData::initSDL_Window()$/;"	f	class:game::GameData	typeref:typename:bool
initText	option.cpp	/^    void Option::initText()$/;"	f	class:game::Option	typeref:typename:void
initWorlds	gamedata.cpp	/^    bool GameData::initWorlds()$/;"	f	class:game::GameData	typeref:typename:bool
initialized	gamedata.cpp	/^    bool GameData::initialized = false;$/;"	m	class:game::GameData	typeref:typename:bool
initialized	gamedata.hpp	/^            static bool initialized;$/;"	m	class:game::GameData	typeref:typename:bool
initialized_text	option.hpp	/^            bool initialized_text = false;$/;"	m	class:game::Option	typeref:typename:bool
isDone	gamedata.hpp	/^            bool isDone() const { return quit; }$/;"	f	class:game::GameData	typeref:typename:bool
isInside	solid.cpp	/^    bool Solid::isInside( SDL_Rect* box)$/;"	f	class:game::Solid	typeref:typename:bool
isPressed	keyboard_handler.cpp	/^    bool KeyboardHandler::isPressed(unsigned char key)$/;"	f	class:game::KeyboardHandler	typeref:typename:bool
isReleased	keyboard_handler.cpp	/^    bool KeyboardHandler::isReleased(unsigned char key)$/;"	f	class:game::KeyboardHandler	typeref:typename:bool
keyboard_handler	gamedata.hpp	/^            KeyboardHandler keyboard_handler;   \/\/ Keyboard input handler$/;"	m	class:game::GameData	typeref:typename:KeyboardHandler
left	dialog.hpp	/^        void left() { if (choice_index > 0) choice_index--; };$/;"	f	class:game::Dialog	typeref:typename:void
load	menu_handler.cpp	/^    void MenuHandler::load()$/;"	f	class:game::MenuHandler	typeref:typename:void
loadMaps	world.cpp	/^    bool World::loadMaps()$/;"	f	class:game::World	typeref:typename:bool
loadMenus	menu_handler.cpp	/^    bool MenuHandler::loadMenus()$/;"	f	class:game::MenuHandler	typeref:typename:bool
location	solid.hpp	/^        std::string location; \/\/ map to jump to if main character is 100% inside this solid (P/;"	m	class:game::Solid	typeref:typename:std::string
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main_character	character.hpp	/^        bool main_character;$/;"	m	class:game::Character	typeref:typename:bool
main_character	gamedata.hpp	/^            Character main_character;           \/\/ Main character$/;"	m	class:game::GameData	typeref:typename:Character
map_index	gamedata.hpp	/^            int map_index = 0;$/;"	m	class:game::GameData	typeref:typename:int
maps	world.cpp	/^    std::vector< Environment > World::maps;$/;"	m	class:game::World	typeref:typename:std::vector<Environment>
maps	world.hpp	/^        static std::vector< Environment > maps;$/;"	m	class:game::World	typeref:typename:std::vector<Environment>
menu_handler	gamedata.hpp	/^            MenuHandler menu_handler;           \/\/ Menu handler$/;"	m	class:game::GameData	typeref:typename:MenuHandler
menu_stack	menu_handler.cpp	/^    std::stack< Menu* > MenuHandler::menu_stack;$/;"	m	class:game::MenuHandler	typeref:typename:std::stack<Menu * >
menu_stack	menu_handler.hpp	/^        static std::stack< Menu* > menu_stack;$/;"	m	class:game::MenuHandler	typeref:typename:std::stack<Menu * >
menus	menu_handler.cpp	/^    std::unordered_map< std::string, Menu > MenuHandler::menus;$/;"	m	class:game::MenuHandler	typeref:typename:std::unordered_map<std::string,Menu>
menus	menu_handler.hpp	/^        static std::unordered_map< std::string, Menu > menus;$/;"	m	class:game::MenuHandler	typeref:typename:std::unordered_map<std::string,Menu>
message	option.hpp	/^            SDL_Texture *message;    \/\/ Font texture to draw$/;"	m	class:game::Option	typeref:typename:SDL_Texture *
moveCharacter	character.cpp	/^    bool Character::moveCharacter(float *actual, float *velocity, int *hitbox_coord, $/;"	f	class:game::Character	typeref:typename:bool
moveDialog	menu_handler.cpp	/^    void MenuHandler::moveDialog(Direction dir)$/;"	f	class:game::MenuHandler	typeref:typename:void
moveMenu	menu_handler.cpp	/^    void MenuHandler::moveMenu(Direction dir)$/;"	f	class:game::MenuHandler	typeref:typename:void
name	character.hpp	/^        std::string name;$/;"	m	class:game::Character	typeref:typename:std::string
name	environment.hpp	/^        std::string name;$/;"	m	class:game::Environment	typeref:typename:std::string
next	option.hpp	/^            std::string next;        \/\/ string of the next menu key (ie: "main", "save screen"/;"	m	class:game::Option	typeref:typename:std::string
operator =	option.cpp	/^    Option& Option::operator=(const Option &other)    $/;"	f	class:game::Option	typeref:typename:Option &
options	menu.hpp	/^        std::vector< Option > options;$/;"	m	class:game::Menu	typeref:typename:std::vector<Option>
page_index	dialog.hpp	/^        unsigned int page_index = 0;$/;"	m	class:game::Dialog	typeref:typename:unsigned int
pages	dialog.hpp	/^        std::vector< std::string > pages;$/;"	m	class:game::Dialog	typeref:typename:std::vector<std::string>
popDialog	menu_handler.cpp	/^    void MenuHandler::popDialog()$/;"	f	class:game::MenuHandler	typeref:typename:void
popMenu	menu_handler.cpp	/^    void MenuHandler::popMenu()$/;"	f	class:game::MenuHandler	typeref:typename:void
portal_color	solid.hpp	/^        uint32_t portal_color = 0;$/;"	m	class:game::Solid	typeref:typename:uint32_t
portals	environment.hpp	/^        std::vector< Solid > portals;$/;"	m	class:game::Environment	typeref:typename:std::vector<Solid>
portals	gamedata.cpp	/^    std::vector< Solid > *GameData::portals;$/;"	m	class:game::GameData	typeref:typename:std::vector<Solid> *
portals	gamedata.hpp	/^            static std::vector< Solid > *portals;   \/\/ A vector of pointers to solids that are/;"	m	class:game::GameData	typeref:typename:std::vector<Solid> *
pushDialog	menu_handler.cpp	/^    void MenuHandler::pushDialog(std::string next, int entity_center_x, int entity_center_y)$/;"	f	class:game::MenuHandler	typeref:typename:void
pushMenu	menu_handler.cpp	/^    void MenuHandler::pushMenu(std::string next)$/;"	f	class:game::MenuHandler	typeref:typename:void
quit	gamedata.cpp	/^    bool GameData::quit = false;$/;"	m	class:game::GameData	typeref:typename:bool
quit	gamedata.hpp	/^            static bool quit;$/;"	m	class:game::GameData	typeref:typename:bool
quit	menu_handler.cpp	/^    void MenuHandler::quit()$/;"	f	class:game::MenuHandler	typeref:typename:void
render	character.cpp	/^    void Character::render( SDL_Renderer *renderer )$/;"	f	class:game::Character	typeref:typename:void
render	dialog.cpp	/^    void Dialog::render( SDL_Renderer *renderer )$/;"	f	class:game::Dialog	typeref:typename:void
render	environment.cpp	/^    void Environment::render( SDL_Renderer *renderer ) $/;"	f	class:game::Environment	typeref:typename:void
render	gamedata.cpp	/^    void GameData::render()$/;"	f	class:game::GameData	typeref:typename:void
render	menu.cpp	/^    void Menu::render( SDL_Renderer *renderer )$/;"	f	class:game::Menu	typeref:typename:void
render	menu_handler.cpp	/^    void MenuHandler::render( SDL_Renderer *renderer )$/;"	f	class:game::MenuHandler	typeref:typename:void
render	option.cpp	/^    void Option::render( SDL_Renderer *renderer, SDL_Rect *menu_box, int height, int index, bool/;"	f	class:game::Option	typeref:typename:void
render	solid.cpp	/^    void Solid::render( SDL_Renderer *renderer )$/;"	f	class:game::Solid	typeref:typename:void
render	world.cpp	/^    void World::render( SDL_Renderer *renderer ) $/;"	f	class:game::World	typeref:typename:void
renderer	gamedata.cpp	/^    SDL_Renderer* GameData::renderer;         $/;"	m	class:game::GameData	typeref:typename:SDL_Renderer *
renderer	gamedata.hpp	/^            static SDL_Renderer* renderer;          \/\/ Hardware accelerated renderer$/;"	m	class:game::GameData	typeref:typename:SDL_Renderer *
right	dialog.hpp	/^        void right() { if (choice_index < choices.size()) choice_index++; };$/;"	f	class:game::Dialog	typeref:typename:void
save	menu_handler.cpp	/^    void MenuHandler::save()$/;"	f	class:game::MenuHandler	typeref:typename:void
selectDialog	menu_handler.cpp	/^    void MenuHandler::selectDialog()$/;"	f	class:game::MenuHandler	typeref:typename:void
selectMenu	menu_handler.cpp	/^    void MenuHandler::selectMenu()$/;"	f	class:game::MenuHandler	typeref:typename:void
sendEvent	gamedata.cpp	/^    void GameData::sendEvent(Event event, bool flag)$/;"	f	class:game::GameData	typeref:typename:void
setAnchor	dialog.cpp	/^    void Dialog::setAnchor(int entity_center_x, int entity_center_y)$/;"	f	class:game::Dialog	typeref:typename:void
setEvent	event.hpp	/^            static void setEvent(Game_EventType type, bool b) { event_tracker[getIndex(type)] = /;"	f	class:game::Event	typeref:typename:void
setInitialized	gamedata.hpp	/^            static void setInitialized(bool val) { initialized = val; }$/;"	f	class:game::GameData	typeref:typename:void
setQuit	gamedata.hpp	/^            static void setQuit(bool val) { quit = val; }$/;"	f	class:game::GameData	typeref:typename:void
setVelocity	character.hpp	/^        void setVelocity(float vx, float vy){ velocity_x = vx; velocity_y = vy; } $/;"	f	class:game::Character	typeref:typename:void
solids	environment.hpp	/^        std::vector< Solid > solids;$/;"	m	class:game::Environment	typeref:typename:std::vector<Solid>
solids	gamedata.cpp	/^    std::vector< Solid > *GameData::solids;$/;"	m	class:game::GameData	typeref:typename:std::vector<Solid> *
solids	gamedata.hpp	/^            static std::vector< Solid > *solids;    \/\/ A pointer to a vector of solids$/;"	m	class:game::GameData	typeref:typename:std::vector<Solid> *
start	gamedata.cpp	/^    void GameData::start()$/;"	f	class:game::GameData	typeref:typename:void
text	dialog.hpp	/^            std::string text;$/;"	m	struct:game::Dialog::Choice	typeref:typename:std::string
text	option.hpp	/^            std::string text;        \/\/ Text of option$/;"	m	class:game::Option	typeref:typename:std::string
title	menu.hpp	/^        std::string title = "";$/;"	m	class:game::Menu	typeref:typename:std::string
type	event.hpp	/^            Game_EventType type;$/;"	m	class:game::Event	typeref:typename:Game_EventType
type	solid.hpp	/^        Type type;             \/\/ type(s) (bit addressing) of solid $/;"	m	class:game::Solid	typeref:typename:Type
type_to_indices	event.cpp	/^    std::unordered_map< Event::Game_EventType, int > Event::type_to_indices = {$/;"	m	class:game::Event	typeref:typename:std::unordered_map<Event::Game_EventType,int>
type_to_indices	event.hpp	/^            static std::unordered_map< Game_EventType, int > type_to_indices;$/;"	m	class:game::Event	typeref:typename:std::unordered_map<Game_EventType,int>
type_to_names	event.cpp	/^    std::unordered_map< Event::Game_EventType, std::string > Event::type_to_names = {$/;"	m	class:game::Event	typeref:typename:std::unordered_map<Event::Game_EventType,std::string>
type_to_names	event.hpp	/^            static std::unordered_map< Game_EventType, std::string > type_to_names;$/;"	m	class:game::Event	typeref:typename:std::unordered_map<Game_EventType,std::string>
up	menu.cpp	/^    void Menu::up() $/;"	f	class:game::Menu	typeref:typename:void
update	character.cpp	/^    void Character::update()$/;"	f	class:game::Character	typeref:typename:void
update	dialog.cpp	/^    void Dialog::update()$/;"	f	class:game::Dialog	typeref:typename:void
update	environment.cpp	/^    void Environment::update() $/;"	f	class:game::Environment	typeref:typename:void
update	gamedata.cpp	/^    void GameData::update()$/;"	f	class:game::GameData	typeref:typename:void
update	menu.cpp	/^    void Menu::update()$/;"	f	class:game::Menu	typeref:typename:void
update	menu_handler.cpp	/^    void MenuHandler::update()$/;"	f	class:game::MenuHandler	typeref:typename:void
update	solid.cpp	/^    void Solid::update()$/;"	f	class:game::Solid	typeref:typename:void
update	world.cpp	/^    void World::update() $/;"	f	class:game::World	typeref:typename:void
updateMap	gamedata.cpp	/^    void GameData::updateMap(int map_index)$/;"	f	class:game::GameData	typeref:typename:void
value	event.hpp	/^            std::string value;$/;"	m	class:game::Event	typeref:typename:std::string
velocity_x	character.hpp	/^        float velocity_x;$/;"	m	class:game::Character	typeref:typename:float
velocity_y	character.hpp	/^        float velocity_y;$/;"	m	class:game::Character	typeref:typename:float
window	gamedata.hpp	/^            SDL_Window* window;          \/\/ Window containing the game$/;"	m	class:game::GameData	typeref:typename:SDL_Window *
world	gamedata.hpp	/^            World world;                        \/\/ World with all the maps$/;"	m	class:game::GameData	typeref:typename:World
~Environment	environment.hpp	/^        ~Environment() { }$/;"	f	class:game::Environment
~Event	event.hpp	/^            ~Event() { }$/;"	f	class:game::Event
~GameData	gamedata.cpp	/^    GameData::~GameData()$/;"	f	class:game::GameData
~Option	option.cpp	/^    Option::~Option() $/;"	f	class:game::Option
~World	world.hpp	/^        ~World() { }$/;"	f	class:game::World
